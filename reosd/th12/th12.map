eclmap
0 ? nop			#nop() do nothing
1 ? delete		#delete() delete self
#10 ? return	#return() return from function
11 ? call		#call(func, args...) call func with args
12 ? jmp		#jmp(s, t) branch to position s in current func and set time to t
13 ? je			#je(s, t) branches if stack top is equal to 0
14 ? jne		#jne(s, t) branches if stack top is not equal to 0
15 ? callSep	#callSep(func, args...) call func with args on a separate thread. runs immediately on call
16 ? callSlot	#callSlot(func, slot, args...) call func with args on thread slot. runs immediately on call
17 ? endSlot	#endSlot(slot) terminates specified thread
40 ? alloc		#alloc(size) allocates size bytes on the stack for variables
42 ? pushi		#pushi(a) push a into the stack
43 ? seti		#seti(a) store stack top into variable a and pop it
44 ? pushf		#pushf(a) same as pushi but for floats
45 ? setf		#setf(a) same as pushf but for floats
50 ? addi		#addi() adds the two topmost values on the stack, pops the operands and pushes the result
51 ? addf		#addf()
52 ? subi		#subi() subtracts the two topmost values on the stack, pops the operands and pushes the result
53 ? subf		#subf()
54 ? muli		#muli() multiplies the two topmost values on the stack, pops the operands and pushes the result
55 ? mulf		#mulf()
56 ? divi		#divi() divides the two topmost values on the stack, pops the operands and pushes the result
57 ? divf		#divf()
58 ? mod		#mod() gets the integer remainder from the division of the two topmost values on the stack, pops the operands and pushes the result
59 ? eqi		#eqi() tests if the two topmost values on the stack are equal, pops the operands and pushes the result
60 ? eqf		#eqf()
61 ? neqi		#eqi() tests if the two topmost values on the stack are not equal, pops the operands and pushes the result
62 ? neqf		#eqf()
63 ? lessi		#lessi() tests if the second topmost value on the stack is lower than the topmost value on the stack, pops the operands and pushes the result
64 ? lessf		#lessf()
65 ? leqi		#leqi() tests if the second topmost value on the stack is lower than or equal to the topmost value on the stack, pops the operands and pushes the result
66 ? leqf		#leqf()
67 ? greati		#greati() tests if the second topmost value on the stack is greater than the topmost value on the stack, pops the operands and pushes the result
68 ? greatf		#greatf()
69 ? geqi		#geqi() tests if the second topmost value on the stack is greater than or equal to the topmost value on the stack, pops the operands and pushes the result
70 ? geqf		#geqf()
71 ? noti		#noti() tests if the topmost value on the stack is zero, pops the operand and pushes the result
72 ? notf		#notf()
73 ? or			#or() ors the two topmost values on the stack, pops the operands and pushes the result
74 ? and		#and() ands the two topmost values on the stack, pops the operands and pushes the result
75 ? xor		#xor() xors the two topmost values on the stack, pops the operands and pushes the result
76 ? or_b		#or_b() bitwise ors the two topmost values on the stack, pops the operands and pushes the result
77 ? and_b		#and_b() bitwise ands the two topmost values on the stack, pops the operands and pushes the result
78 ? dec		#dec(v) pushes the variable v and then decreases its value by 1
82 ? normRad	#normRad(v) wraps the value of v into the [-pi, pi] range
83 ? wait		#wait(t) waits t frames

256 ? enmNew				#enmNew(func, x, y, l, s, i) creates a new enemy at the current coordinates + xy, the enemy has life l and the main item dropped on death is i. s is score reward on death, but is non-functional
257 ? enmNewAbs				#enmNewAbs(func, x, y, l, s, i) creates a new enemy at the coordinates xy
258 ? anmFile				#anmFile(f) selects an anm file from an indexed list that this enemy will use for anmAt
259 ? anmAt					#anmAt(slot, i) plays the anm script i from the file selected by anmFile in the specified slot
260 ? enmNewMir				#enmNewMir(func, x, y, l, s, i) creates a new enemy at the current coordinates + xy, with mirrored movement
261 ? enmNewAbsMir			#enmNewAbsMir(func, x, y, l, s, i) creates a new enemy at the coordinates xy, with mirrored movement
262 ? anmMoveAt				#anmMoveAt(slot, i) selects the anm scripts, starting from i to i+4, which will be used according enemy movement for the specified slot
263 ? anmAt2				#anmAt2(f, i) plays the anm script i from file f independent from its caller
265 ? enmNewNoBoss			#enmNewNoBoss(func, x, y, l, s, i) creates a new enemy at the current coordinates + xy only if boss mode is disabled
266 ? enmNewAbsNoBoss		#enmNewAbs(func, x, y, l, s, i) creates a new enemy at the coordinates xy only if boss mode is disabled
267 ? enmNewMirNoBoss		#enmNewMirNoBoss(func, x, y, l, s, i) creates a new enemy at the current coordinates + xy, with mirrored movement, only if boss mode is disabled
268 ? enmNewAbsMirNoBoss	#enmNewAbsMirNoBoss(func, x, y, l, s, i) creates a new enemy at the coordinates xy, with mirrored movement, only if boss mode is disabled
300 ? enmPos				#enmPos(x, y) sets the current position to xy
301 ? enmPosTime			#enmPos(t, f, x, y) changes the current position into xy according the specified function(s) in t frames
302 ? enmPos2
303 ? enmPosTime2
304 ? enmDir				#enmDir(r, s) sets the current movement direction to r at speed s
305 ? enmDirTime			#enmDirTime(t, f, r, s)
306 ? enmDir2
307 ? enmDirTime2
308 ? enmCir
309 ? enmCirTime
310 ? enmCir2
311 ? enmCirTime2
312 ? enmRand
313 ? enmRand2
314 ? enmToBoss
315 ? enmToBoss2
320 ? enmEll
321 ? enmEllTime
322 ? enmEll2
323 ? enmEllTime2
325 ? enmBezier
325 ? enmBezier2
400 ? hitbox
401 ? killbox
402 ? setFlags
403 ? unsetFlags
404 ? setMoveArea
405 ? unsetMoveArea
406 ? itemClear
407 ? itemEx
408 ? itemArea
409 ? itemDrop
410 ? itemMain
411 ? life
412 ? boss
413 ? resetBoss
414 ? interrupt
415 ? invinc
416 ? playSE
417 ? shake
418 ? msgBegin
419 ? msgWait
420 ? killWait 
421 ? timeoutAt
422 ? card
423 ? cardEnd
424 ? stageProg
425 ? enmClear
427 ? lifebar
429 ? setf_diff3
430 ? setf_diff5
431 ? setf_diff2
432 ? seti_diff3
433 ? seti_diff5
434 ? seti_diff2
435 ? seti_rank
436 ? setf_rank
437 ? cardE
438 ? cardN
439 ? cardH
440 ? lives
442 ? survival
445 ? resetBossParam
446 ? invincBomb
447 ? speed
448 ? wait_rank
453 ? strikeSE
454 ? logoShow
455 ? isAlive
456 ? storePos
500 ? etNew
501 ? etOn
502 ? etSpr
503 ? etOfs
504 ? etAng
505 ? etSpd
506 ? etAmt
507 ? etMode
508 ? etSE
509 ? etEx
510 ? etClear_all
511 ? etCopy
512 ? etClear
513 ? etClear_ni
514 ? etSpd_d3
515 ? etSpd_d5
516 ? etSpd_d2
517 ? etAmt_d3
518 ? etAmt_d5
519 ? etAmt_d2
520 ? getAim
521 ? etSpd_rank
522 ? etAmt_rank
523 ? etOfs_rad
524 ? etDist
525 ? etOfs_abs
526 ? fog
600 ? laserSize
601 ? laserTime
602 ? laserOn
603 ? laserOn2
604 ? laserOfs
605 ? laserDir
606 ? laserMaxLen
607 ? laserWidth
608 ? laserAng
609 ? laserRot
610 ? laserBreak
611 ? laserOn3

-10000 $ RAND
-9999 % RF
-9998 % RDEG
-9997 % FINAL_X
-9996 % FINAL_Y
-9995 % ABS_X
-9994 % ABS_Y
-9993 % REL_X
-9992 % REL_Y
-9991 % PLAYER_X
-9990 % PLAYER_Y
-9989 % AIM
-9988 $ TIME
-9987 % RF2
-9986 $ TIMEOUT
-9985 $ I0
-9984 $ I1
-9983 $ I2
-9982 $ I3
-9981 % F0
-9980 % F1
-9979 % F2
-9978 % F3
-9977 % FINAL_X2
-9976 % FINAL_Y2
-9975 % ABS_X2
-9974 % ABS_Y2
-9973 % REL_X2
-9972 % REL_Y2
-9971 % ANGLE_ABS
-9970 % ANGLE_REL
-9969 % SPEED_ABS
-9968 % SPEED_REL
-9967 % RADIUS_ABS
-9966 % RADIUS_REL
-9965 % PLAYER_X2
-9964 % PLAYER_Y2
-9963 % BOSSX
-9962 % BOSSY
-9960 $ DIFFICULTY
-9959 $ RANK
-9957 $ ONE
-9954 $ LIFE
-9953 $ EASY
-9952 $ NORMAL
-9951 $ HARD
-9950 $ LUNATIC
-9949 $ MISS_COUNT
-9948 $ BOMB_COUNT
-9947 $ CAPTURED
-9946 $ ENM_COUNT
-9945 $ SHOT_TYPE
-9944 % DIST
-9943 $ BI0
-9942 $ BI1
-9941 $ BI2
-9940 $ BI3
-9939 % BF0
-9938 % BF1
-9937 % BF2
-9936 % BF3
-9935 % F4
-9934 % F5
-9933 % F6
-9932 % F7
-9930 $ POWER
